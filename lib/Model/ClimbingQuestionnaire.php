<?php
/**
 * ClimbingQuestionnaire
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Codealpine
 *
 * The codealpine API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ClimbingQuestionnaire Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ClimbingQuestionnaire implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ClimbingQuestionnaire';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'float',
        'slug' => 'string',
        'title' => 'string',
        'description' => 'string',
        'access_required' => 'string',
        'climbing_question' => '\OpenAPI\Client\Model\ClimbingQuestion[]',
        'analysis' => '\OpenAPI\Client\Model\ClimbingQuestionnaireAnalysis[]',
        'user_responses' => '\OpenAPI\Client\Model\ClimbingQuestionnaireUser[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'slug' => null,
        'title' => null,
        'description' => null,
        'access_required' => null,
        'climbing_question' => null,
        'analysis' => null,
        'user_responses' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'slug' => 'slug',
        'title' => 'title',
        'description' => 'description',
        'access_required' => 'accessRequired',
        'climbing_question' => 'climbingQuestion',
        'analysis' => 'analysis',
        'user_responses' => 'userResponses'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'slug' => 'setSlug',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'access_required' => 'setAccessRequired',
        'climbing_question' => 'setClimbingQuestion',
        'analysis' => 'setAnalysis',
        'user_responses' => 'setUserResponses'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'slug' => 'getSlug',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'access_required' => 'getAccessRequired',
        'climbing_question' => 'getClimbingQuestion',
        'analysis' => 'getAnalysis',
        'user_responses' => 'getUserResponses'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['slug'] = $data['slug'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['access_required'] = $data['access_required'] ?? null;
        $this->container['climbing_question'] = $data['climbing_question'] ?? null;
        $this->container['analysis'] = $data['analysis'] ?? null;
        $this->container['user_responses'] = $data['user_responses'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['slug'] === null) {
            $invalidProperties[] = "'slug' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['access_required'] === null) {
            $invalidProperties[] = "'access_required' can't be null";
        }
        if ($this->container['climbing_question'] === null) {
            $invalidProperties[] = "'climbing_question' can't be null";
        }
        if ($this->container['analysis'] === null) {
            $invalidProperties[] = "'analysis' can't be null";
        }
        if ($this->container['user_responses'] === null) {
            $invalidProperties[] = "'user_responses' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug slug
     *
     * @return self
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets access_required
     *
     * @return string
     */
    public function getAccessRequired()
    {
        return $this->container['access_required'];
    }

    /**
     * Sets access_required
     *
     * @param string $access_required access_required
     *
     * @return self
     */
    public function setAccessRequired($access_required)
    {
        $this->container['access_required'] = $access_required;

        return $this;
    }

    /**
     * Gets climbing_question
     *
     * @return \OpenAPI\Client\Model\ClimbingQuestion[]
     */
    public function getClimbingQuestion()
    {
        return $this->container['climbing_question'];
    }

    /**
     * Sets climbing_question
     *
     * @param \OpenAPI\Client\Model\ClimbingQuestion[] $climbing_question climbing_question
     *
     * @return self
     */
    public function setClimbingQuestion($climbing_question)
    {
        $this->container['climbing_question'] = $climbing_question;

        return $this;
    }

    /**
     * Gets analysis
     *
     * @return \OpenAPI\Client\Model\ClimbingQuestionnaireAnalysis[]
     */
    public function getAnalysis()
    {
        return $this->container['analysis'];
    }

    /**
     * Sets analysis
     *
     * @param \OpenAPI\Client\Model\ClimbingQuestionnaireAnalysis[] $analysis analysis
     *
     * @return self
     */
    public function setAnalysis($analysis)
    {
        $this->container['analysis'] = $analysis;

        return $this;
    }

    /**
     * Gets user_responses
     *
     * @return \OpenAPI\Client\Model\ClimbingQuestionnaireUser[]
     */
    public function getUserResponses()
    {
        return $this->container['user_responses'];
    }

    /**
     * Sets user_responses
     *
     * @param \OpenAPI\Client\Model\ClimbingQuestionnaireUser[] $user_responses user_responses
     *
     * @return self
     */
    public function setUserResponses($user_responses)
    {
        $this->container['user_responses'] = $user_responses;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


